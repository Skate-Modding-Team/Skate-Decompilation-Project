#pragma once

#include "assetsinterface.h"

const char* RENDERMESHDATA = "PEGASUS::RWOBJECTTYPE_RENDERMESHDATA";
const char* RENDERMODELDATA = "PEGASUS::RWOBJECTTYPE_RENDERMODELDATA";
const char* SIMPLETRIMESHDATA = "PEGASUS::RWOBJECTTYPE_SIMPLETRIMESHDATA";
const char* SPLINEDATA = "PEGASUS::RWOBJECTTYPE_SPLINEDATA";
const char* RENDERMATERIALDATA = "PEGASUS::RWOBJECTTYPE_RENDERMATERIALDATA";
const char* COLLISIONMATERIALDATA = "PEGASUS::RWOBJECTTYPE_COLLISIONMATERIALDATA";
const char* ROLLERDESCDATA = "PEGASUS::RWOBJECTTYPE_ROLLERDESCDATA";
const char* VERSIONDATA = "PEGASUS::RWOBJECTTYPE_VERSIONDATA";
const char* LOCATIONDESCDATA = "PEGASUS::RWOBJECTTYPE_LOCATIONDESCDATA";
const char* COLLISIONMODELDATA = "PEGASUS::RWOBJECTTYPE_COLLISIONMODELDATA";
const char* TABLEOFCONTENTS = "PEGASUS::RWOBJECTTYPE_TABLEOFCONTENTS";
const char* COLLISIONBEZIERDATA = "PEGASUS::RWOBJECTTYPE_COLLISIONBEZIERDATA";
const char* INSTANCEDATA = "PEGASUS::RWOBJECTTYPE_INSTANCEDATA";
const char* RENDERBLENDSHAPEEDATA = "PEGASUS::RWOBJECTTYPE_RENDERBLENDSHAPEEDATA";
const char* WORLDPAINTERLAYERDATA = "PEGASUS::RWOBJECTTYPE_WORLDPAINTERLAYERDATA";
const char* WORLDPAINTERQUADTREEDATA = "PEGASUS::RWOBJECTTYPE_WORLDPAINTERQUADTREEDATA";
const char* WORLDPAINTERDICTIONARYDATA = "PEGASUS::RWOBJECTTYPE_WORLDPAINTERDICTIONARYDATA";
const char* NAVMESHDATA = "PEGASUS::RWOBJECTTYPE_NAVMESHDATA";
const char* RAINDATA = "PEGASUS::RWOBJECTTYPE_RAINDATA";
const char* AIPATHDATA = "PEGASUS::RWOBJECTTYPE_AIPATHDATA";
const char* STATSDATA = "PEGASUS::RWOBJECTTYPE_STATSDATA";
const char* MASSIVEDATA = "PEGASUS::RWOBJECTTYPE_MASSIVEDATA";
const char* DEPTHMAPDATA = "PEGASUS::RWOBJECTTYPE_DEPTHMAPDATA";
const char* LIONDATA = "PEGASUS::RWOBJECTTYPE_LIONDATA";
const char* TRIGGERINSTANCEDATA = "PEGASUS::RWOBJECTTYPE_TRIGGERINSTANCEDATA";
const char* WAYPOINTDATA = "PEGASUS::RWOBJECTTYPE_WAYPOINTDATA";
const char* SPLINESUBREF = "PEGASUS::RWOBJECTTYPE_SPLINESUBREF";
const char* ROLLERDESCSUBREF = "PEGASUS::RWOBJECTTYPE_ROLLERDESCSUBREF";
const char* RENDERMATERIALSUBREF = "PEGASUS::RWOBJECTTYPE_RENDERMATERIALSUBREF";
const char* COLLISIONMATERIALSUBREF = "PEGASUS::RWOBJECTTYPE_COLLISIONMATERIALSUBREF";
const char* LOCATIONDESCSUBREF = "PEGASUS::RWOBJECTTYPE_LOCATIONDESCSUBREF";
const char* INSTANCESUBREF = "PEGASUS::RWOBJECTTYPE_INSTANCESUBREF";
const char* WAYPOINTSUBREF = "PEGASUS::RWOBJECTTYPE_WAYPOINTSUBREF";
const char* TRIGGERINSTANCESUBREF = "PEGASUS::RWOBJECTTYPE_TRIGGERINSTANCESUBREF";

namespace pegasus
{

enum PegasusObjectTypes : unsigned int
{
    RWOBJECTTYPE_RENDERMESHDATA = 0x00EB0000,
    RWOBJECTTYPE_RENDERMODELDATA = 0x00EB0001,
    RWOBJECTTYPE_SIMPLETRIMESHDATA = 0x00EB0003,
    RWOBJECTTYPE_SPLINEDATA = 0x00EB0004,
    RWOBJECTTYPE_RENDERMATERIALDATA = 0x00EB0005,
    RWOBJECTTYPE_COLLISIONMATERIALDATA = 0x00EB0006,
    RWOBJECTTYPE_ROLLERDESCDATA = 0x00EB0007,
    RWOBJECTTYPE_VERSIONDATA = 0x00EB0008,
    RWOBJECTTYPE_LOCATIONDESCDATA = 0x00EB0009,
    RWOBJECTTYPE_COLLISIONMODELDATA = 0x00EB000A,
    RWOBJECTTYPE_TABLEOFCONTENTS = 0x00EB000B,
    RWOBJECTTYPE_COLLISIONBEZIERDATA = 0x00EB000C,
    RWOBJECTTYPE_INSTANCEDATA = 0x00EB000D,
    RWOBJECTTYPE_RENDERBLENDSHAPEEDATA = 0x00EB000E,
    RWOBJECTTYPE_WORLDPAINTERLAYERDATA = 0x00EB000F,
    RWOBJECTTYPE_WORLDPAINTERQUADTREEDATA = 0x00EB0010,
    RWOBJECTTYPE_WORLDPAINTERDICTIONARYDATA = 0x00EB0011,
    RWOBJECTTYPE_NAVMESHDATA = 0x00EB0012,
    RWOBJECTTYPE_RAINDATA = 0x00EB0013,
    RWOBJECTTYPE_AIPATHDATA = 0x00EB0014,
    RWOBJECTTYPE_STATSDATA = 0x00EB0015,
    RWOBJECTTYPE_MASSIVEDATA = 0x00EB0016,
    RWOBJECTTYPE_DEPTHMAPDATA = 0x00EB0017,
    RWOBJECTTYPE_LIONDATA = 0x00EB0018,
    RWOBJECTTYPE_TRIGGERINSTANCEDATA = 0x00EB0019,
    RWOBJECTTYPE_WAYPOINTDATA = 0x00EB001A,
    RWOBJECTTYPE_SPLINESUBREF = 0x00EB0064,
    RWOBJECTTYPE_ROLLERDESCSUBREF = 0x00EB0065,
    RWOBJECTTYPE_RENDERMATERIALSUBREF = 0x00EB0066,
    RWOBJECTTYPE_COLLISIONMATERIALSUBREF = 0x00EB0067,
    RWOBJECTTYPE_LOCATIONDESCSUBREF = 0x00EB0068,
    RWOBJECTTYPE_INSTANCESUBREF = 0x00EB0069,
    RWOBJECTTYPE_WAYPOINTSUBREF = 0x00EB006A,
    RWOBJECTTYPE_TRIGGERINSTANCESUBREF = 0x00EB006B,
    ARENADICTIONARY = 0x00EC0010
};

struct tAABB
{
    rw::math::vpu::Vector4 m_Min;
    rw::math::vpu::Vector4 m_Max;

    //EndianSwap is entirely stripped out. This is just my assumption of how the implementation is
    //Same goes for rw::EndianSwap(pegasus::tAABB& aabb) which just calls this method
    void EndianSwap()
    {
        rw::EndianSwap(*m_Min);
        rw::EndianSwap(*m_Max);
    }

    tAABB(const tAABB& aabb)
    {
        m_Min = aabb.m_Min;
        m_Max = aabb.m_Max;
    }
    
    //either stripped or is just empty. leaving it like this for now
    tAABB(){}

    tAABB& operator=(const tAABB& rho)
    {
        m_Min = aabb.m_Min;
        m_Max = aabb.m_Max;
        return this;
    }
    
};

struct tTypeToString
{
    RwObjectType m_iType;
    const char* m_pszString;
};

tTypeToString TypeToStringTable[35] = {
    {RWOBJECTTYPE_RENDERMESHDATA, RENDERMESHDATA},
    {RWOBJECTTYPE_RENDERMODELDATA, RENDERMODELDATA},
    {RWOBJECTTYPE_SIMPLETRIMESHDATA, SIMPLETRIMESHDATA},
    {RWOBJECTTYPE_SPLINEDATA, SPLINEDATA},
    {RWOBJECTTYPE_RENDERMATERIALDATA, RENDERMATERIALDATA},
    {RWOBJECTTYPE_COLLISIONMATERIALDATA, COLLISIONMATERIALDATA},
    {RWOBJECTTYPE_ROLLERDESCDATA, ROLLERDESCDATA},
    {RWOBJECTTYPE_VERSIONDATA, VERSIONDATA},
    {RWOBJECTTYPE_LOCATIONDESCDATA, LOCATIONDESCDATA},
    {RWOBJECTTYPE_COLLISIONMODELDATA, COLLISIONMODELDATA},
    {RWOBJECTTYPE_TABLEOFCONTENTS, TABLEOFCONTENTS},
    {RWOBJECTTYPE_COLLISIONBEZIERDATA, COLLISIONBEZIERDATA},
    {RWOBJECTTYPE_INSTANCEDATA, INSTANCEDATA},
    {RWOBJECTTYPE_RENDERBLENDSHAPEEDATA, RENDERBLENDSHAPEEDATA},
    {RWOBJECTTYPE_WORLDPAINTERLAYERDATA, WORLDPAINTERLAYERDATA},
    {RWOBJECTTYPE_WORLDPAINTERQUADTREEDATA, WORLDPAINTERQUADTREEDATA},
    {RWOBJECTTYPE_WORLDPAINTERDICTIONARYDATA, WORLDPAINTERDICTIONARYDATA},
    {RWOBJECTTYPE_NAVMESHDATA, NAVMESHDATA},
    {RWOBJECTTYPE_RAINDATA, RAINDATA},
    {RWOBJECTTYPE_AIPATHDATA, AIPATHDATA},
    {RWOBJECTTYPE_STATSDATA, STATSDATA},
    {RWOBJECTTYPE_MASSIVEDATA, MASSIVEDATA},
    {RWOBJECTTYPE_DEPTHMAPDATA, DEPTHMAPDATA},
    {RWOBJECTTYPE_LIONDATA, LIONDATA},
    {RWOBJECTTYPE_TRIGGERINSTANCEDATA, TRIGGERINSTANCEDATA},
    {RWOBJECTTYPE_WAYPOINTDATA, WAYPOINTDATA},
    {RWOBJECTTYPE_SPLINESUBREF, SPLINESUBREF},
    {RWOBJECTTYPE_ROLLERDESCSUBREF, ROLLERDESCSUBREF},
    {RWOBJECTTYPE_RENDERMATERIALSUBREF, RENDERMATERIALSUBREF},
    {RWOBJECTTYPE_COLLISIONMATERIALSUBREF, COLLISIONMATERIALSUBREF},
    {RWOBJECTTYPE_LOCATIONDESCSUBREF, LOCATIONDESCSUBREF},
    {RWOBJECTTYPE_INSTANCESUBREF, INSTANCESUBREF},
    {RWOBJECTTYPE_WAYPOINTSUBREF, WAYPOINTSUBREF},
    {RWOBJECTTYPE_TRIGGERINSTANCESUBREF, TRIGGERINSTANCESUBREF}
}

const char* TypeToString(const RwObjectType iType);

template <typename T>
void Addr2Offset(void* pBase, T*& pAddr)
{
    pAddr = (pAddr - pBase);
}

//for some reason they chose not to inline this one?
template <typename T>
void Offset2Addr(void* pBase, T*& pAddr);

template <typename T>
void UnfixAddress(T*& pAddress, void* pBase)
{
    if (pAddress)
    {
        Addr2Offset<T>(pBase, pAddress);
    }
}

template <typename T>
void FixupAddress(T*& pAddress, void* pBase)
{
    if (pAddress)
    {
        Offset2Addr<T>(pBase, pAddress);
    }
}

unsigned int ALIGNSIZE32(unsigned int size, unsigned int align)
{
  return (size + align - 1) & ~(align - 1);
}

template <typename T>
T* ALIGNPTR(T *pSrc, unsigned int align)
{
  return (T*)((unsigned int)pSrc + align - 1) & ~(align - 1);
}



void RegisterArenaTypes();

}
